name: Aggregate and Filter Clash Nodes # 工作流名称

on:
  workflow_dispatch: # 允许手动触发
  schedule:
    - cron: '0 */6 * * *' # 每6小时运行一次（UTC 0:00, 6:00, 12:00, 18:00）

# 并发控制：确保同一时间只有一个工作流实例运行
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest # 在最新的 Ubuntu 运行器上执行

    steps:
      - name: Checkout repository # 步骤1: 检出您的代码仓库
        uses: actions/checkout@v4

      - name: Set up Python # 步骤2: 设置 Python 环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # 明确指定 Python 3.10，确保与 aiohttp>=3.8.1 兼容
          cache: 'pip' # 缓存 pip 依赖，加速安装

      - name: Verify requirements.txt # 步骤3: 验证 requirements.txt 文件是否存在
        run: |
          if [ ! -f requirements.txt ]; then
            echo "Error: requirements.txt not found"
            exit 1
          fi

      - name: Install dependencies # 步骤4: 安装 Python 依赖
        run: |
          python -m pip install --upgrade pip # 升级 pip
          pip install -r requirements.txt # 安装 requirements.txt 中列出的依赖
        continue-on-error: false # 如果安装失败，则终止工作流

      - name: Initialize log file and directories # 步骤5: 初始化日志文件和目录
        run: |
          mkdir -p clash_aggregator # 确保 clash_aggregator 目录存在
          touch clash_aggregator/clash_aggregator.log # 创建空的日志文件
          echo "Initializing log file for Clash Aggregator" > clash_aggregator/clash_aggregator.log # 写入初始信息

      - name: Aggregate and Filter Nodes # 步骤6: 运行您的节点聚合和过滤脚本
        id: aggregate_nodes # 为此步骤分配一个ID
        run: |
          echo "Starting node aggregation from sources defined in 'clash_aggregator/sources.txt'..."
          # 运行 Python 脚本，通过命令行参数指定输出文件和端口
          # 日志会通过 logging 模块输出到 stderr 和 clash_aggregator.log
          python ./clash_aggregator/node_aggregator.py \
            --output ./clash_aggregator/config.yaml \
            --port 7890 \
            --socks-port 7891 \
            --log-level INFO # 可以根据需要调整日志级别，例如 DEBUG
          echo "Node aggregation finished. Check ./clash_aggregator/config.yaml and ./clash_aggregator/clash_aggregator.log for details."
        env:
          PYTHONUNBUFFERED: 1 # 实时显示 Python 输出

      - name: Upload Artifacts # 步骤7: 上传生成的配置文件、日志和IP缓存
        uses: actions/upload-artifact@v4
        with:
          name: clash-aggregator-artifacts # Artifacts 的名称
          path: |
            clash_aggregator/config.yaml
            clash_aggregator/clash_aggregator.log
            clash_aggregator/ip_cache.json # 确保 ip_cache.json 也被上传
          if-no-files-found: warn # 如果文件缺失，发出警告但不失败

      - name: Commit and Push if changed # 步骤8: 如果生成的配置文件或日志有变化，则提交并推送
        run: |
          git config --global user.name 'github-actions[bot]' # 配置Git用户名为GitHub Actions机器人
          git config --global user.email 'github-actions[bot]@users.noreply.github.com' # 配置Git用户邮箱
          git add ./clash_aggregator/config.yaml ./clash_aggregator/clash_aggregator.log ./clash_aggregator/ip_cache.json # 添加配置文件、日志和IP缓存
          git commit -m "Update Clash config, logs, and IP cache [skip ci]" || echo "No changes to commit" # 提交更改，并使用 [skip ci] 防止本次提交再次触发工作流
          git push # 推送更改到仓库
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # 确保具有写入权限

      - name: Notify on Failure (Create New Issue) # 步骤9: 工作流失败时创建新Issue
        if: failure() # 只有当前Job失败时才运行此步骤
        uses: actions/github-script@v7
        with:
          script: |
            const workflowRunURL = `${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`;
            const issueTitle = `🔴 Clash 节点聚合失败: ${new Date().toLocaleString()}`;
            const issueBody = `
            Clash 节点聚合工作流运行失败。请检查以下日志以获取详细信息：
            工作流运行链接: ${workflowRunURL}

            请检查以下可能的原因：
            - 订阅源是否有效？
            - IP 查询 API 是否正常工作？
            - 脚本中是否有新的解析错误？
            `;

            try {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody
              });
              console.log('成功创建新的 Issue 通知失败。');
            } catch (error) {
              console.error(`创建 Issue 失败: ${error.message}`);
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # 确保拥有创建Issue的权限
