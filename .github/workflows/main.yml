name: Aggregate Clash Nodes and Update Repo

on:
  workflow_dispatch: # 允许手动触发
  schedule:
    - cron: '0 */6 * * *' # 每6小时运行一次 (UTC 0:00, 6:00, 12:00, 18:00)

# 并发控制：确保同一时间只有一个工作流实例运行，避免冲突
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest # 在最新的 Ubuntu 环境上运行

    steps:
      - name: Checkout repository # 步骤1: 检出您的代码仓库
        uses: actions/checkout@v4

      - name: Set up Python # 步骤2: 设置 Python 环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # 使用 Python 3.10
          cache: 'pip' # 缓存 pip 依赖，加速安装

      - name: Verify requirements.txt # 步骤3: 验证 requirements.txt 文件是否存在
        run: |
          if [ ! -f requirements.txt ]; then
            echo "Error: requirements.txt not found. Please create it with your Python dependencies (e.g., PyYAML, aiohttp)."
            exit 1
          fi

      - name: Install dependencies # 步骤4: 安装 Python 依赖
        run: |
          python -m pip install --upgrade pip # 升级 pip
          pip install -r requirements.txt # 安装 requirements.txt 中列出的依赖
        # 如果安装失败，工作流会在这里停止，因为它无法继续执行脚本
        continue-on-error: false

      - name: Initialize log file and directories # 步骤5: 初始化日志文件和目录
        run: |
          mkdir -p clash_aggregator # 确保 clash_aggregator 目录存在
          # 确保日志文件存在并清空，防止上次运行的旧日志干扰
          echo "Initializing log file for Clash Aggregator at $(date '+%Y-%m-%d %H:%M:%S')" > clash_aggregator/clash_aggregator.log

      - name: Aggregate and Filter Nodes # 步骤6: 运行您的节点聚合和过滤脚本
        id: aggregate_nodes # 为此步骤分配一个ID (虽然在此版本中未被其他步骤引用，但保留无害)
        run: |
          echo "Starting Clash node aggregation from sources in './clash_aggregator/sources.txt'..."
          # 运行 Python 脚本
          python ./clash_aggregator/node_aggregator.py \
            --output ./clash_aggregator/config.yaml \
            --port 7890 \
            --socks-port 7891 \
            --log-level INFO # 设置日志级别为 INFO
          echo "Node aggregation finished. Check ./clash_aggregator/config.yaml and ./clash_aggregator/clash_aggregator.log for details."
        env:
          PYTHONUNBUFFERED: 1 # 确保 Python 输出实时显示在工作流日志中

      - name: Upload Artifacts (Optional) # 步骤7: 上传生成的文件作为工作流产物，便于下载查看
        # 即使不用于发布，上传产物也能方便您在GitHub Actions界面下载查看结果
        uses: actions/upload-artifact@v4
        with:
          name: clash-aggregator-results # 产物的名称
          path: |
            clash_aggregator/config.yaml
            clash_aggregator/clash_aggregator.log
            clash_aggregator/ip_cache.json
          # 如果文件不存在，只发出警告而不失败工作流
          if-no-files-found: warn

      - name: Commit and Push changes # 步骤8: 如果配置文件、日志或IP缓存有变化，则提交并推送到仓库
        run: |
          git config --global user.name 'github-actions[bot]' # 配置Git用户名为GitHub Actions机器人
          git config --global user.email 'github-actions[bot]@users.noreply.github.com' # 配置Git用户邮箱
          # 将生成的 Clash 配置、日志和 IP 缓存文件添加到 Git 暂存区
          git add ./clash_aggregator/config.yaml ./clash_aggregator/clash_aggregator.log ./clash_aggregator/ip_cache.json
          # 尝试提交更改，如果文件没有变化，则打印“No changes to commit”并继续，不报错
          # "[skip ci]" 标签可防止本次提交再次触发工作流的无限循环
          git commit -m "Update Clash config, logs, and IP cache [skip ci]" || echo "No changes to commit"
          git push # 推送更改到仓库
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # 使用GitHub提供的令牌进行身份验证，确保有写入权限
