name: Aggregate and Filter Clash Nodes # 工作流名称

on:
  workflow_dispatch: # 允许手动触发
  schedule:
    - cron: '0 */6 * * *' # 每6小时运行一次，例如 UTC 时间 0点、6点、12点、18点

jobs:
  build:
    runs-on: ubuntu-latest # 在最新的 Ubuntu 运行器上执行

    steps:
      - name: Checkout repository # 步骤1: 检出您的代码仓库
        uses: actions/checkout@v4

      - name: Set up Python # 步骤2: 设置 Python 环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # 推荐使用 Python 3.9 或更高版本以获得更好的 async/await 支持

      - name: Install dependencies # 步骤3: 安装 Python 依赖
        run: pip install -r requirements.txt

      - name: Aggregate and Filter Nodes # 步骤4: 运行您的节点聚合和过滤脚本
        id: aggregate_nodes
        run: |
          echo "Starting node aggregation from sources defined in 'clash_aggregator/sources.txt'..."
          # 运行 Python 脚本，通过命令行参数指定输出文件和端口
          # --output 参数将配置文件输出到指定路径
          # 日志会通过 logging 模块输出到 stderr 和 clash_aggregator.log
          python ./clash_aggregator/node_aggregator.py \
            --output ./clash_aggregator/config.yaml \
            --port 7890 \
            --socks-port 7891
          echo "Node aggregation finished. Check ./clash_aggregator/config.yaml and ./clash_aggregator/clash_aggregator.log for details."
        env:
          PYTHONUNBUFFERED: 1 # 实时显示 Python 输出

      - name: Upload Logs # 可选步骤：上传日志文件，方便调试
        uses: actions/upload-artifact@v4
        with:
          name: clash-aggregator-logs
          path: clash_aggregator/clash_aggregator.log
          if-no-files-found: ignore # 如果没有找到日志文件，则忽略此步骤

      - name: Commit and Push if changed # 步骤5: 如果生成的配置文件有变化，则提交并推送
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add ./clash_aggregator/config.yaml ./clash_aggregator/clash_aggregator.log ./clash_aggregator/ip_cache.json # 同时添加配置文件、日志和IP缓存
          git commit -m "Update Clash config and logs [skip ci]" || echo "No changes to commit"
          git push
