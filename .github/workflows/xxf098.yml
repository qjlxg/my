name: LiteSpeedTest & Update Clash Config

on:
  # schedule:
  #   - cron: '0 */6 * * *' # 每6小时运行一次
  workflow_dispatch: # 允许手动触发

jobs:
  speedtest:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Your Repository
        uses: actions/checkout@v4

      - name: Download Full Clash Configuration (Your Node Source)
        id: download_config
        run: |
          CONFIG_URL="https://raw.githubusercontent.com/qjlxg/vt/refs/heads/main/clash_config.yaml" # 您的主配置/订阅URL
          OUTPUT_FILE="clash_config.yaml"
          echo "Downloading Clash configuration from $CONFIG_URL..."
          curl -S -L --retry 5 --retry-delay 5 --connect-timeout 10 --max-time 60 --output "$OUTPUT_FILE" "$CONFIG_URL" || { echo "Config download failed"; exit 1; }
          echo "clash_config.yaml downloaded."

      - name: Clone LiteSpeedTest Repository for Docker Build
        uses: actions/checkout@v4
        with:
          repository: xxf098/LiteSpeedTest # 克隆 LiteSpeedTest 仓库
          path: LiteSpeedTest              # 克隆到 LiteSpeedTest/ 目录下

      - name: Patch LiteSpeedTest Dockerfile for Go Modules
        run: |
          echo "Patching LiteSpeedTest Dockerfile to fix Go module issues..."
          # 使用 sed 命令在 RUN GOOS=js GOARCH=wasm go get -u ./... 之前插入 go mod tidy 和 go mod download
          # 这样可以确保依赖被正确清理和下载
          sed -i '/RUN GOOS=js GOARCH=wasm go get -u .\/.../i RUN go mod tidy\nRUN go mod download' ./LiteSpeedTest/docker/Dockerfile
          echo "--- Patched Dockerfile Content ---"
          cat ./LiteSpeedTest/docker/Dockerfile # 打印修改后的 Dockerfile 内容供调试
          echo "----------------------------------"

      - name: Build LiteSpeedTest Docker Image
        run: |
          echo "Building LiteSpeedTest Docker image..."
          # 进入 LiteSpeedTest 仓库目录进行构建
          docker build --network=host -t litespeedtest-custom -f ./LiteSpeedTest/docker/Dockerfile ./LiteSpeedTest
          echo "LiteSpeedTest Docker image built as litespeedtest-custom."

      - name: Run LiteSpeedTest (Custom Docker Image) and Save TXT Result
        run: |
          # 确保输出目录存在
          mkdir -p sc

          # 运行LiteSpeedTest进行测速，直接输出TXT结果到 sc/xxf098.txt
          docker run --rm --network host \
            -v "$(pwd)/clash_config.yaml:/app/clash_config.yaml" \
            -v "$(pwd)/config.json:/app/config.json" \
            -v "$(pwd)/sc:/app/sc" `# 挂载整个 sc 目录，让容器直接写入` \
            litespeedtest-custom \
            --test file:///app/clash_config.yaml \
            --config /app/config.json \
            --output-mode 4 \
            --output-path /app/sc/xxf098.txt # 容器内路径
          
          echo "LiteSpeedTest results saved to sc/xxf098.txt in plain text format."
          cat sc/xxf098.txt # 打印最终的文本内容供调试

      - name: Commit and Push New Clash Config
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add sc/xxf098.txt # 添加最终的 TXT 结果文件
          git commit -m "Update Clash config with LiteSpeedTest results (sc/xxf098.txt)" || echo "No changes to commit"
          git push
