# 工作流名称
name: 订阅检查与节点更新

# 触发工作流的事件
on:
  workflow_dispatch: # 允许手动从 GitHub Actions 页面触发此工作流
  schedule:
    - cron: '0 */6 * * *' # 每 6 小时运行一次 (例如，每天的 0点、6点、12点、18点)

jobs:
  update-clash-config:
    runs-on: ubuntu-latest # 在最新的 Ubuntu 环境上运行，提供必要的 Docker 支持

    steps:
      - name: 检出仓库 # 第一步：将你的 GitHub 仓库代码克隆到 Actions 运行环境中
        uses: actions/checkout@v4 # 使用 actions/checkout@v4 动作来完成此操作

      # --- 缓存 Docker 镜像层 ---
      - name: 缓存 Docker 镜像层
        uses: actions/cache@v4 # 使用 actions/cache 动作进行缓存
        with:
          path: /var/lib/docker # Docker 镜像层通常存储在这个路径
          key: ${{ runner.os }}-docker-${{ hashFiles('**/Dockerfile') }}-${{ hashFiles('.github/workflows/*.yml') }} # 缓存键，当 Dockerfile 或工作流文件更改时失效
          restore-keys: |
            ${{ runner.os }}-docker- # 恢复键，用于部分匹配缓存

      # --- 使用 Docker 镜像运行 beck-8/subs-check ---
      # 这个核心步骤将复杂的 Docker 命令写入一个临时脚本，然后执行它。
      - name: 使用 subs-check 处理多个订阅并保存
        shell: bash # 强制使用 Bash shell 来执行此步骤的脚本
        run: |
          # 定义你的第一个订阅链接 (Clash Meta 格式)
          SUBSCRIPTION_URL_META="https://raw.githubusercontent.com/qjlxg/ss/refs/heads/master/list.meta.yml"
          # 定义你的第二个订阅链接 (SS 明文或 Base64 编码，subs-check 会自动识别和解析)
          SUBSCRIPTION_URL_SS_TXT="https://raw.githubusercontent.com/qjlxg/aggregator/refs/heads/main/ss.txt"
          
          # 定义输出文件存放的目录和最终的文件名
          OUTPUT_DIR="sc"
          OUTPUT_FILENAME="beck-8.yaml"
          OUTPUT_PATH="${OUTPUT_DIR}/${OUTPUT_FILENAME}"

          echo "创建输出目录 ${OUTPUT_DIR}..."
          mkdir -p "$OUTPUT_DIR" # 如果 'sc/' 目录不存在，则创建它

          echo "使用 subs-check 处理订阅并测速、排序..."
          
          # **核心改动**：将 docker run 命令写入一个临时脚本文件 (run_subs_check.sh)
          # **最终修正**：使用 'sh -c' 显式地在容器内执行 '/app/subs-check check ...'。
          # 这确保了 Docker 镜像的 ENTRYPOINT/CMD 不会干扰我们的命令。
          cat <<EOF > run_subs_check.sh
          #!/bin/bash
          docker run --rm -v "${{ github.workspace }}:/app/output" "ghcr.io/beck-8/subs-check:latest" sh -c "/app/subs-check check -t 30000 -c 50 -o \"/app/output/${OUTPUT_PATH}\" -proxy-api-url \"$SUBSCRIPTION_URL_META,$SUBSCRIPTION_URL_SS_TXT\" -download-url \"https://speed.cloudflare.com/__down?bytes=10485760\" -upload-url \"https://speed.cloudflare.com/__up\" -stream-test \"youtube,netflix\" -rename \"{{.Emoji}}{{.Country}} | {{.Speed | printf \\"%.2f\\"}}MB/s | {{.Remark}}\" -filter \"speed > 0.1\" -sort \"speed:desc\""
          EOF

          # 赋予临时脚本执行权限
          chmod +x run_subs_check.sh
          # 执行临时脚本
          ./run_subs_check.sh

          # 检查文件是否成功生成，如果文件不存在，则工作流失败
          if [ ! -f "$OUTPUT_PATH" ]; then
            echo "错误: subs-check 未能生成文件 ${OUTPUT_PATH}。"
            exit 1
          fi
          echo "Clash 配置已通过 subs-check 生成并保存到 ${OUTPUT_PATH}。"

      # --- 解决非快进问题：在提交前拉取远程最新代码 ---
      - name: 拉取远程最新代码 (解决非快进问题)
        if: success()
        run: |
          echo "尝试拉取远程 main 分支的最新更改..."
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git pull --rebase origin main
          if [ $? -ne 0 ]; then
            echo "错误: git pull --rebase 失败。可能存在无法自动解决的冲突，请检查仓库历史。"
            exit 1
          fi
          echo "远程代码拉取并rebase成功。"

      # --- 提交并推送更新后的配置文件 ---
      - name: 提交并推送更新后的配置文件
        if: success()
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "更新 Clash 配置：从多订阅源获取节点并保存到 sc/beck-8.yaml"
          file_pattern: "${OUTPUT_PATH}" 
          branch: main
          commit_user_name: github-actions[bot]
          commit_user_email: 41898282+github-actions[bot]@users.noreply.github.com
          commit_author: qjlxg <12179157+qjlxg@users.noreply.github.com>
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
