# 工作流名称
name: 订阅检查与节点更新 (Subconverter Docker - 官方镜像)

# 触发工作流的事件
on:
  push:
    branches:
      - main # 当有代码推送到 main 分支时自动触发
  workflow_dispatch: # 允许手动从 GitHub Actions 页面触发此工作流
  schedule:
    - cron: '0 */6 * * *' # 每 6 小时运行一次 (例如，每天的 0点、6点、12点、18点)

jobs:
  update-clash-config:
    runs-on: ubuntu-latest # 在最新的 Ubuntu 环境上运行，提供必要的 Docker 支持

    steps:
      - name: 检出仓库 # 第一步：将你的 GitHub 仓库代码克隆到 Actions 运行环境中
        uses: actions/checkout@v4 # 使用 actions/checkout@v4 动作来完成此操作

      # --- 缓存 Docker 镜像层 (可选，加速后续运行) ---
      - name: 缓存 Docker 镜像层
        uses: actions/cache@v4 # 使用 actions/cache 动作进行缓存
        with:
          path: /var/lib/docker # Docker 镜像层通常存储在这个路径
          key: ${{ runner.os }}-docker-subconverter-official-${{ hashFiles('.github/workflows/*.yml') }} # 缓存键
          restore-keys: |
            ${{ runner.os }}-docker-subconverter-official-

      - name: 使用 subconverter 处理订阅并保存
        shell: bash # 强制使用 Bash shell 来执行此步骤的脚本
        run: |
          # 定义你的订阅链接
          SUBSCRIPTION_URL_META="https://raw.githubusercontent.com/qjlxg/ss/refs/heads/master/list.meta.yml"
          SUBSCRIPTION_URL_SS_TXT="https://raw.githubusercontent.com/qjlxg/aggregator/refs/heads/main/ss.txt"
          
          # 定义输出文件存放的目录和最终的文件名
          OUTPUT_DIR="sc"
          OUTPUT_FILENAME="clash_config.yaml"
          OUTPUT_PATH="${OUTPUT_DIR}/${OUTPUT_FILENAME}"

          echo "创建输出目录 ${OUTPUT_DIR}..."
          mkdir -p "$OUTPUT_DIR"

          echo "启动 subconverter Docker 容器..."
          # 运行 subconverter 官方 Docker 镜像
          # -d: 后台运行
          # --rm: 容器停止后自动删除
          # --name: 给容器一个名字方便管理
          # -p 25500:25500: 映射端口，因为我们从宿主机（GitHub Actions Runner）curl 访问
          # docker.io/subconverter/subconverter:latest 是官方镜像
          docker run -d --rm --name subconverter_instance -p 25500:25500 docker.io/subconverter/subconverter:latest

          echo "等待 subconverter 服务启动..."
          # 增加等待时间，确保服务完全启动并监听端口
          sleep 25 # 增加到 25 秒，确保服务完全启动

          # 增强的端口检查循环，确保服务就绪
          for i in $(seq 1 10); do
            if nc -z localhost 25500 &>/dev/null; then
              echo "subconverter 服务已在 25500 端口监听。"
              break
            fi
            echo "等待 subconverter 服务监听端口... (${i}/10)"
            sleep 2
          done

          if ! nc -z localhost 25500 &>/dev/null; then
            echo "错误: subconverter 服务未能在 25500 端口启动。请检查容器日志。"
            docker logs subconverter_instance # 打印容器日志以便调试
            exit 1
          fi

          echo "使用 subconverter 处理订阅并生成 Clash 配置..."
          
          # URL 编码订阅链接
          ENCODED_META_URL=$(echo "$SUBSCRIPTION_URL_META" | sed 's/\//%2F/g; s/:/%3A/g; s/?/%3F/g; s/&/%26/g; s/=/%3D/g')
          ENCODED_SS_TXT_URL=$(echo "$SUBSCRIPTION_URL_SS_TXT" | sed 's/\//%2F/g; s/:/%3A/g; s/?/%3F/g; s/&/%26/g; s/=/%3D/g')

          # 组合 API URL 参数
          CONVERSION_API_ENDPOINT="http://localhost:25500/sub?url=${ENCODED_META_URL}|${ENCODED_SS_TXT_URL}&target=clashr&sc=true&fast_url=http%3A%2F%2Fspeed.cloudflare.com%2F__down%3Fbytes%3D10485760&tfo=true&udp=true&rename=true&filter=speed%3E0.1"
          
          echo "从 subconverter API 获取配置: ${CONVERSION_API_ENDPOINT}"

          # 使用 curl 获取配置并保存
          # -sS: 静默模式，但显示错误
          # -L: 遵循重定向
          # -f: 失败时（HTTP 状态码 >= 400）不输出到文件，直接报错
          # --retry 5 --retry-delay 5: 增加重试机制，以防服务刚刚启动还没完全准备好
          curl -sSLf --retry 5 --retry-delay 5 -o "${OUTPUT_PATH}" "${CONVERSION_API_ENDPOINT}"
          
          # 停止并移除 subconverter 容器
          echo "停止并移除 subconverter 容器..."
          docker stop subconverter_instance

          # 检查文件是否成功生成，如果文件不存在，则工作流失败
          if [ ! -f "$OUTPUT_PATH" ]; then
            echo "错误: subconverter 未能生成文件 ${OUTPUT_PATH}。"
            exit 1
          fi
          echo "Clash 配置已通过 subconverter 生成并保存到 ${OUTPUT_PATH}。"

      # --- 解决非快进问题：在提交前拉取远程最新代码 ---
      - name: 拉取远程最新代码 (解决非快进问题)
        if: success() # 仅当所有前面的步骤都成功时才执行此步骤
        run: |
          echo "尝试拉取远程 main 分支的最新更改..."
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git pull --rebase origin main
          if [ $? -ne 0 ]; then # 检查上一个 Git 命令的退出状态码，如果非零则表示失败
            echo "错误: git pull --rebase 失败。可能存在无法自动解决的冲突，请检查仓库历史。"
            exit 1 # 终止工作流并标记为失败
          fi
          echo "远程代码拉取并rebase成功。"

      # --- 提交并推送更新后的配置文件 ---
      - name: 提交并推送更新后的配置文件
        if: success() # 仅当所有前面的步骤都成功时才执行此步骤
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "更新 Clash 配置：从多订阅源获取节点并保存到 sc/clash_config.yaml"
          file_pattern: "${OUTPUT_PATH}" 
          branch: main # 指定目标分支
          commit_user_name: github-actions[bot]
          commit_user_email: "41898282+github-actions[bot]@users.noreply.github.com"
          commit_author: qjlxg <12179157+qjlxg@users.noreply.github.com>
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
