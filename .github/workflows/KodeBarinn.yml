name: Mihomo Node Speed Test

on:
  workflow_dispatch: # 允许在 GitHub Actions 界面手动触发
  schedule:
    - cron: '0 */6 * * *' # 每 6 小时自动运行一次（UTC 时间）

jobs:
  test-and-filter:
    runs-on: ubuntu-latest # 使用最新的 Ubuntu 环境
    timeout-minutes: 360 # 设置最大运行时间为 6 小时

    steps:
      - name: ⬇️ 检出仓库代码
        uses: actions/checkout@v4 # 检出仓库代码

      - name: 🛠️ 设置 Rust 编程环境
        uses: actions-rs/toolchain@v1 # 配置 Rust 环境
        with:
          toolchain: stable # 使用稳定版 Rust
          profile: minimal # 最小化安装
          override: true # 覆盖默认工具链

      - name: ♻️ 缓存 Rust 依赖和编译结果
        uses: actions/cache@v4 # 缓存 Rust 相关目录
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            mihomo-speedtest-rs/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: 📦 安装 mihomo-speedtest-rs 工具
        run: |
          echo "正在从 GitHub 仓库编译并安装 mihomo-speedtest-rs..."
          if [ ! -d "mihomo-speedtest-rs" ]; then
            git clone https://github.com/KodeBarinn/mihomo-speedtest-rs.git || { echo "错误：克隆 mihomo-speedtest-rs 仓库失败！"; exit 1; }
          else
            echo "mihomo-speedtest-rs 仓库已存在，跳过克隆。"
          fi
          
          cd mihomo-speedtest-rs
          cargo build --release || { echo "错误：编译 mihomo-speedtest-rs 失败！"; exit 1; }
          
          if [ ! -f "target/release/mihomo-speedtest" ]; then
            echo "错误：mihomo-speedtest 二进制文件未成功编译！"
            exit 1
          fi
          
          sudo mv target/release/mihomo-speedtest /usr/local/bin/mihomo-speedtest
          echo "mihomo-speedtest-rs 工具已成功安装到 /usr/local/bin/mihomo-speedtest。"

      - name: ⬇️ 获取 Mihomo 版本号
        id: download_mihomo_version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # 使用 GitHub Token 提高 API 请求配额
        run: |
          echo "正在检测 Mihomo 最新稳定版本..."
          # 调试：打印 API 请求的原始响应
          RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/MetaCubeX/mihomo/releases/latest")
          echo "GitHub API 响应: $RESPONSE"
          
          MIHOMO_VERSION=$(echo "$RESPONSE" | grep -Po '"tag_name": "\K[^"]*"' | head -n 1)
          if [ -z "$MIHOMO_VERSION" ]; then
            echo "错误：无法获取 Mihomo 最新版本号，请检查 GitHub API 或网络连接。"
            exit 1
          fi
          # 清理版本号，确保不包含非法字符
          MIHOMO_VERSION=$(echo "$MIHOMO_VERSION" | tr -d '\n\r"')
          echo "version=$MIHOMO_VERSION" >> $GITHUB_ENV
          echo "检测到 Mihomo 最新版本: $MIHOMO_VERSION"

      - name: ♻️ 缓存 Mihomo 核心二进制文件
        id: cache-mihomo
        uses: actions/cache@v4
        with:
          path: /usr/local/bin/mihomo
          key: ${{ runner.os }}-mihomo-${{ env.version }}
          restore-keys: |
            ${{ runner.os }}-mihomo-

      - name: ⬇️ 下载 Mihomo 核心二进制文件
        run: |
          set -x # 启用调试，打印每条命令
          CACHE_HIT="${{ steps.cache-mihomo.outputs.cache-hit }}"
          echo "缓存命中状态: $CACHE_HIT"
          
          if [ "$CACHE_HIT" = "true" ]; then
            echo "Mihomo 核心已从缓存中恢复，跳过下载。"
            if [ -f "/usr/local/bin/mihomo" ]; then
              chmod +x /usr/local/bin/mihomo
              echo "已确保 /usr/local/bin/mihomo 具有执行权限。"
            else
              echo "错误：缓存命中但 Mihomo 核心文件缺失，请检查缓存路径或手动清理缓存。"
              exit 1
            fi
            exit 0
          fi
          
          echo "Mihomo 核心未在缓存中找到，正在下载..."
          MIHOMO_VERSION="${{ env.version }}"
          if [ -z "$MIHOMO_VERSION" ]; then
            echo "错误：无法获取 Mihomo 版本号，请检查上一步骤的输出。"
            exit 1
          fi
          MIHOMO_URL="https://github.com/MetaCubeX/mihomo/releases/download/${MIHOMO_VERSION}/mihomo-linux-amd64-${MIHOMO_VERSION}.gz"
          echo "正在从 ${MIHOMO_URL} 下载 Mihomo 核心..."
          
          wget -q -O mihomo.gz "${MIHOMO_URL}" || { echo "错误：下载 Mihomo 核心失败！请检查 URL 或网络连接。"; exit 1; }
          gunzip mihomo.gz || { echo "错误：解压 Mihomo 核心失败！"; exit 1; }
          chmod +x mihomo
          sudo mv mihomo /usr/local/bin/mihomo
          echo "Mihomo 核心已成功安装到 /usr/local/bin/mihomo。"
          set +x # 关闭调试

      - name: ⬇️ 下载原始 Clash 订阅配置
        id: download_config
        run: |
          echo "开始下载原始 Clash 订阅配置文件..."
          curl -sSLo original_clash_config.yaml "https://raw.githubusercontent.com/qjlxg/ss/refs/heads/master/list_raw.txt" || { echo "错误：下载订阅文件失败！"; exit 1; }
          
          if [ ! -f ./original_clash_config.yaml ] || [ ! -s ./original_clash_config.yaml ]; then
            echo "错误：original_clash_config.yaml 文件未成功下载或为空，请检查订阅链接。"
            exit 1
          fi
          echo "原始 Clash 订阅配置下载完成。"
          node_count=$(grep -c '^- name:' original_clash_config.yaml || true)
          echo "原始订阅约包含 ${node_count} 个节点。"

      - name: 📁 创建 output 目录
        run: |
          mkdir -p output
          echo "已创建 output/ 目录。"

      - name: 🚀 运行 mihomo-speedtest-rs 进行节点测试与过滤
        id: mihomo_test
        run: |
          echo "开始使用 mihomo-speedtest-rs 进行综合节点测试和智能过滤..."
          /usr/local/bin/mihomo-speedtest \
            --config ./original_clash_config.yaml \
            --use-mihomo \
            --mihomo-binary /usr/local/bin/mihomo \
            --max-latency 1000ms \
            --min-download-speed 1 \
            --download-size 5 \
            --upload-size 1 \
            --timeout 60s \
            --max-concurrent 100 \
           # --filter "sg|jp|kr|us|ca|de|fr|uk|nl" \
           # --block "cn|china|中国|大陆|北京|上海" \
            --output ./output/KodeBarinn.yaml \
            --verbose || { echo "错误：mihomo-speedtest-rs 测试失败！"; exit 1; }
          
          if [ ! -f ./output/KodeBarinn.yaml ] || [ ! -s ./output/KodeBarinn.yaml ]; then
            echo "错误：output/KodeBarinn.yaml 文件未生成或为空，可能是没有节点通过测试。"
            exit 1
          fi
          echo "mihomo-speedtest-rs 测试和过滤已完成，合格节点已保存到 output/KodeBarinn.yaml。"
          final_node_count=$(grep -c '^- name:' ./output/KodeBarinn.yaml || true)
          echo "最终生成了 ${final_node_count} 个合格节点。"

      - name: ⬆️ 提交结果到仓库
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add output/KodeBarinn.yaml
          git commit -m "Update KodeBarinn.yaml with latest node test results" || { echo "没有新的更改需要提交"; exit 0; }
          git push || { echo "错误：推送更改到仓库失败！"; exit 1; }
