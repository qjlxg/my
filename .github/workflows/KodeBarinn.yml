name: Speedtest Clash Nodes

on:
  workflow_dispatch: # 允许手动触发工作流
  schedule:
    - cron: '0 8 * * *' # 每天 UTC 时间上午 8 点运行 (根据需要调整)

jobs:
  run_speedtest:
    runs-on: ubuntu-latest # 使用最新的 Ubuntu runner

    steps:
    - name: Checkout repository # 检出仓库代码
      uses: actions/checkout@v4

    - name: Set up Go # 安装 Go 环境，如果需要从源码编译或者使用 Go install
      uses: actions/setup-go@v5
      with:
        go-version: '1.22' # 建议使用最新稳定版 Go

    - name: Download speedtest-clash binary # 下载预编译的 speedtest-clash 二进制文件
      id: download_tool
      run: |
        # 获取最新版本号，或者您可以指定固定版本，例如 v0.2.4
        LATEST_RELEASE=$(curl -s "https://api.github.com/repos/xiecang/speedtest-clash/releases/latest" | grep -Po '"tag_name": "\K[^"]*')
        echo "Latest release: $LATEST_RELEASE"

        # 根据 runner 架构下载对应的二进制包
        ARCH=$(uname -m)
        FILENAME=""
        if [ "$ARCH" == "x86_64" ]; then
          FILENAME="speedtest-clash_Linux_x86_64.tar.gz"
        elif [ "$ARCH" == "aarch64" ]; then
          FILENAME="speedtest-clash_Linux_arm64.tar.gz"
        else
          echo "Unsupported architecture: $ARCH"
          exit 1
        fi

        DOWNLOAD_URL="https://github.com/xiecang/speedtest-clash/releases/download/${LATEST_RELEASE}/${FILENAME}"
        echo "Downloading from: $DOWNLOAD_URL"
        curl -L -o speedtest-clash.tar.gz "$DOWNLOAD_URL"
        tar -xzf speedtest-clash.tar.gz speedtest-clash
        chmod +x speedtest-clash
        ./speedtest-clash -h # 验证工具是否可运行

    - name: Prepare Clash configuration file # 准备 Clash 配置文件
      run: |
        # 从您提供的 URL 下载配置文件
        CONFIG_URL="https://raw.githubusercontent.com/qjlxg/vt/refs/heads/main/clash_config.yaml"
        echo "正在从 ${CONFIG_URL} 下载配置文件..."
        curl -sSL "$CONFIG_URL" -o clash_config.yaml
        if [ $? -ne 0 ]; then
            echo "配置文件下载失败！请检查 URL 或网络连接。"
            exit 1
        fi
        echo "--- Clash config file content (first 20 lines) ---"
        head -n 20 clash_config.yaml
        echo "---------------------------------------------------"

    - name: Run speedtest-clash # 运行测速
      id: speedtest
      run: |
        mkdir -p results # 创建存放结果的目录
        # 您可以根据需要调整以下参数，例如 -size, -concurrent, -timeout, -l 等
        ./speedtest-clash -c clash_config.yaml -output results/speedtest_results.yaml -size 104857600 -concurrent 18 -timeout 30s -l "https://speed.cloudflare.com/__down?bytes=%d" -sort b
        
        # 验证结果文件是否生成
        if [ ! -s results/speedtest_results.yaml ]; then
            echo "Error: 测速结果文件为空或未生成！"
            exit 1
        fi
        echo "--- Speedtest results (first 20 lines) ---"
        head -n 20 results/speedtest_results.yaml
        echo "------------------------------------------"

    - name: Commit and push results (Optional) # 提交并推送测速结果 (可选步骤)
      # 仅在有更改时提交，避免空提交
      # 这需要您的仓库设置允许 GitHub Actions bot 写入权限
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add results/speedtest_results.yaml
        git commit -m "chore: Update speedtest results" || echo "No changes to commit"
        git push || echo "No new commits to push"
