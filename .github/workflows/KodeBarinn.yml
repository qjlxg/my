# 工作流名称
name: Clash 速度测试

# 触发工作流的事件
on:
  # 允许手动触发工作流
  workflow_dispatch:
  # 定时触发工作流
  schedule:
    # cron 表达式，表示每 6 小时运行一次 (例如：每天的 0点、6点、12点、18点运行)
    - cron: '0 */6 * * *'

# 定义一个或多个作业
jobs:
  # 定义一个名为 "speed-test-and-sort" 的作业
  speed-test-and-sort:
    # 指定作业运行的操作系统环境，这里使用最新版的 Ubuntu
    runs-on: ubuntu-latest

    # 定义作业中要执行的步骤
    steps:
      # 步骤 1: 检出仓库代码
      - name: 检出仓库
        uses: actions/checkout@v4

      # 步骤 2: 设置 Python 环境
      - name: 设置 Python 环境
        uses: actions/setup-python@v5
        with:
          # 使用最新的 Python 3 版本
          python-version: '3.x'

      # 步骤 3: 安装 Python 依赖
      - name: 安装 Python 依赖
        run: |
          pip install PyYAML

      # --- 新增步骤：设置 Go 环境 ---
      - name: 设置 Go 环境
        uses: actions/setup-go@v5
        with:
          go-version: '1.22' # 推荐使用较新的 Go 版本，例如 1.22 或更高

      # --- 新增步骤：安装 faceair/clash-speedtest 工具 ---
      - name: 安装 faceair/clash-speedtest 工具
        run: |
          echo "正在安装 faceair/clash-speedtest..."
          # go install 会将二进制文件安装到 GOPATH/bin 目录下
          go install github.com/faceair/clash-speedtest@latest || { echo "错误：安装 faceair/clash-speedtest 失败！"; exit 1; }
          # 验证是否安装成功并查看帮助信息 (可选，现在使用 -h)
          clash-speedtest -h || { echo "错误：clash-speedtest 命令不可用！"; exit 1; } # <--- 修正：将 -v 改为 -h
          echo "faceair/clash-speedtest 安装成功。"

      # 步骤 5: 下载完整的 Clash 配置
      - name: 下载完整的 Clash 配置
        id: download_config
        run: |
          # 定义 Clash 配置文件的下载 URL。请替换为您的实际地址。
          CONFIG_URL="https://raw.githubusercontent.com/qjlxg/vt/refs/heads/main/clash_config.yaml"
          OUTPUT_FILE="clash_config.yaml"

          echo "尝试从 $CONFIG_URL 下载完整的 Clash 配置文件..."

          curl -S -L -v --retry 5 --retry-delay 5 --connect-timeout 10 --max-time 60 --output "$OUTPUT_FILE" "$CONFIG_URL"

          if [ $? -ne 0 ]; then
            echo "错误: curl 命令执行失败，无法下载文件。"
            exit 1
          fi

          if [ ! -f "$OUTPUT_FILE" ]; then
            echo "错误: $OUTPUT_FILE 文件不存在。"
            exit 1
          fi

          if [ ! -s "$OUTPUT_FILE" ]; then
            echo "错误: $OUTPUT_FILE 文件为空。"
            head -n 20 "$OUTPUT_FILE" || true
            exit 1
          fi

          echo "$OUTPUT_FILE 文件下载成功，大小: $(du -h "$OUTPUT_FILE" | awk '{print $1}')"

      # 步骤 6: 过滤节点 (使用 Python 脚本)
      - name: 过滤节点 (使用 Python 脚本)
        run: python filter_clash_nodes.py
      
      # 步骤 7: 验证过滤后的文件
      - name: 验证过滤后的文件
        id: check_filtered_file
        run: |
          if [ ! -s "filtered_nodes.yaml" ]; then
            echo "警告: 'filtered_nodes.yaml' 文件为空或无有效内容。可能没有节点符合过滤条件。"
            echo "FILTERED_NODES_EMPTY=true" >> $GITHUB_OUTPUT 
            head -n 20 filtered_nodes.yaml || true
            exit 0
          fi
          echo "filtered_nodes.yaml 文件大小: $(du -h filtered_nodes.yaml | awk '{print $1}')"
          echo "FILTERED_NODES_EMPTY=false" >> $GITHUB_OUTPUT

      # 步骤 8: 备份旧的 Clash 配置
      - name: 备份旧的 Clash 配置
        if: steps.check_filtered_file.outputs.FILTERED_NODES_EMPTY == 'false'
        run: |
          if [ ! -f "clash.yaml" ]; then
            echo "警告: 'clash.yaml' 文件不存在，跳过备份旧配置。"
            exit 0
          fi

          mkdir -p sc
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          echo "正在备份旧的 clash.yaml 到 sc/clash_${TIMESTAMP}.yaml..."
          cp clash.yaml sc/clash_${TIMESTAMP}.yaml
          echo "旧配置备份完成。"

      # 步骤 10: 运行速度测试 - 阶段二：下载/上传速度测试
      - name: 运行速度测试 - 阶段二：下载/上传速度测试
        if: success() && steps.check_filtered_file.outputs.FILTERED_NODES_EMPTY == 'false'
        run: |
          echo "开始运行所有节点的完整速度测试（跳过快速延迟测试阶段）..."
          clash-speedtest \
            -c ./filtered_nodes.yaml \
            -output ./clash.yaml \
            -download-size 5 \
            -upload-size 1 \
            -timeout 38s \
            -concurrent 50 \
            -max-latency 5000ms \
            -min-download-speed 1 \
            -min-upload-speed 0 \
            -rename
          echo "全速测试完成，结果保存到 clash.yaml"

      # 步骤 11: 验证生成的 clash.yaml 文件
      - name: 验证生成的 clash.yaml 文件
        id: check_final_file
        if: success() && steps.check_filtered_file.outputs.FILTERED_NODES_EMPTY == 'false'
        run: |
          if [ -f "clash.yaml" ]; then
            echo "'clash.yaml' 文件已生成，大小: $(du -h clash.yaml | awk '{print $1}')"
            echo "--- clash.yaml 文件内容 (前50行) ---"
            head -n 50 clash.yaml || true
            echo "----------------------------------------"
            if [ "$(grep -c 'name:' clash.yaml)" -eq 0 ]; then
              echo "警告: 'clash.yaml' 文件中没有检测到代理节点。可能所有节点都未通过速度测试后的过滤。"
              exit 1
            fi
          else
            echo "错误: 未生成 'clash.yaml'。速度测试可能失败或没有通过过滤的节点。"
            exit 1
          fi

      # 步骤 12: 提交并推送排序后的配置文件 (包含备份文件)
      - name: 提交并推送排序后的配置文件
        if: success() && steps.check_final_file.outcome == 'success'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "更新 Clash 配置：节点已按速度排序（靠近中国地区）并备份旧配置"
          file_pattern: "clash.yaml sc/"
          branch: main
          commit_user_name: github-actions[bot]
          commit_user_email: 41898282+github-actions[bot]@users.noreply.github.com
          commit_author: qjlxg <12179157+qjlxg@users.noreply.github.com>
          repository: .
          skip_dirty_check: false
          skip_fetch: false
          skip_checkout: false
          disable_globbing: false
          create_branch: false
          create_git_tag_only: false
          internal_git_binary: git
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
