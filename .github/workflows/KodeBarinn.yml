name: Auto Search and Download YAML

on:
  workflow_dispatch: # 允许手动触发
  schedule:
    # 每天运行一次。请注意 API 限制，不要设置太频繁。
    - cron: '0 0 * * *' 

jobs:
  search-and-download:
    runs-on: ubuntu-latest
    permissions:
      contents: write # 允许写入仓库内容 (提交文件)
      pull-requests: write # 允许创建 Pull Request，如果选择这种方式提交

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Git LFS (Optional, for large files if needed)
      run: |
        sudo apt-get update
        sudo apt-get install -y git-lfs # 安装 Git LFS，如果文件可能很大
        git lfs install
      shell: bash

    - name: Create output directory
      run: mkdir -p sc

    - name: Search GitHub and Gist for YAML configs
      id: search_configs
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # 自动提供的 GITHUB_TOKEN
      run: |
        echo "Starting GitHub and Gist search for YAML configs..."
        
        # 定义搜索关键词和文件上限
        SEARCH_KEYWORDS="proxies: type:" # 寻找包含代理类型定义的 YAML
        MAX_FILES=5 # 最多下载5个文件，防止下载过多触发限制
        
        # 清空或创建 merged_config.yaml 文件，用于合并所有下载的有效配置
        echo "---" > sc/merged_config.yaml # YAML 文件的起始标记
        
        # --- 搜索 GitHub 仓库文件 ---
        echo "Searching GitHub repositories for YAML files..."
        # gh search code 命令查找最新的 YAML/YML 文件，包含指定关键词
        # --per-page 100 获取每页100个结果
        # --json path,raw_url 用于只返回文件路径和原始URL
        # --order desc --sort updated 按照更新时间降序排列
        # --limit 100 限制总搜索结果数量
        gh search code --json path,raw_url --order desc --sort updated --limit 100 \
            --extension yaml --extension yml "$SEARCH_KEYWORDS" \
            | jq -r '.[] | .raw_url' > github_search_results.txt
        
        # --- 搜索 Gist 文件 (Gist API搜索比repo搜索弱，这里做简单尝试) ---
        echo "Searching Gist for YAML files..."
        # Gist 没有直接的'code search' API，只能通过遍历Gist或基于用户搜索
        # 更复杂的方法会涉及遍历所有公开Gist，这里为了简化，暂时只依赖GitHub Repo搜索
        # 如果你特别需要Gist，可以考虑使用Python脚本配合requests库来处理Gist API
        
        # 遍历下载找到的文件
        DOWNLOADED_COUNT=0
        while IFS= read -r URL && [ "$DOWNLOADED_COUNT" -lt "$MAX_FILES" ]; do
          FILENAME=$(basename "$URL") # 从URL中提取文件名
          TEMP_FILE="sc/temp_${FILENAME}" # 临时文件名
          
          echo "Attempting to download: $URL"
          wget -q -O "$TEMP_FILE" "$URL"
          
          if [ $? -eq 0 ]; then
            echo "Successfully downloaded $FILENAME"
            # 检查文件是否可能是有效的Clash配置 (非常简单的检查，实际可能更复杂)
            if grep -q "proxies:" "$TEMP_FILE" || grep -q "proxy-groups:" "$TEMP_FILE"; then
              echo "  -> Appears to be a Clash-like config. Appending to merged_config.yaml"
              # 将下载的文件内容（去除YAML文档开始标记---）追加到合并文件中
              tail -n +2 "$TEMP_FILE" >> sc/merged_config.yaml
              echo "" >> sc/merged_config.yaml # 添加一个空行，分隔不同文件内容
              DOWNLOADED_COUNT=$((DOWNLOADED_COUNT + 1))
            else
              echo "  -> Not a recognized Clash-like config, skipping merge."
            fi
            rm "$TEMP_FILE" # 移除临时文件
          else
            echo "Failed to download $URL"
          fi
        done < github_search_results.txt
        
        if [ "$DOWNLOADED_COUNT" -eq 0 ]; then
          echo "Warning: No valid YAML configurations were downloaded."
          # 可以选择在这里让工作流失败，如果这是强制要求
          # exit 1
        fi
        
        echo "Finished downloading YAML files. Total valid files merged: $DOWNLOADED_COUNT"
        
      shell: bash

    - name: Commit and push results
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        git add sc/merged_config.yaml
        git commit -m "Update merged_config.yaml with auto-discovered configs" || echo "No changes to commit"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
