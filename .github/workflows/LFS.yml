name: Auto Search and Download YAML

on:
  workflow_dispatch: # Allows manual triggering
  push:
    branches:
      - main         # Triggers on push to main branch
  schedule:
    - cron: '0 0 * * *' # Runs daily at 00:00 JST (assuming default runner timezone)

jobs:
  search-and-download:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Allows writing to the repository (committing files)
      pull-requests: write # Allows creating Pull Requests (if chosen for submission)

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Git LFS (Optional, for large files if needed)
      run: |
        sudo apt-get update
        sudo apt-get install -y git-lfs # Install Git LFS
        git lfs install
      shell: bash

    - name: Create output directory
      run: mkdir -p sc

    - name: Search GitHub and Gist for YAML configs
      id: search_configs
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Automatically provided GITHUB_TOKEN
      run: |
        echo "Starting GitHub and Gist search for YAML configs..."
        
        # Define search keywords and file limit
        SEARCH_KEYWORDS="proxies: type: sort:updated-desc" # Search for YAMLs with proxy type definitions, sorted by update date
        MAX_FILES=5 # Max number of files to download, to prevent rate limits
        
        # Clear or create merged_config.yaml file for merging all downloaded valid configs
        echo "---" > sc/merged_config.yaml # YAML document start marker
        
        # --- Search GitHub repository files ---
        echo "Searching GitHub repositories for YAML files..."
        # gh search code now requests 'path', 'repository', 'url' fields
        # 'repository' is an object, we need to extract owner and name from it using jq
        gh search code --json path,repository \
            --limit 30 \
            --extension yaml --extension yml "$SEARCH_KEYWORDS" \
            | jq -c '.[] | {owner: .repository.owner.login, repo: .repository.name, path: .path}' > github_search_results.json
        
        # --- Gist Search (still limited, only focusing on GitHub Repos for now) ---
        echo "Gist search is not directly supported by 'gh search code'. Focusing on repository search."
        
        # Loop through downloaded files
        DOWNLOADED_COUNT=0
        while IFS= read -r line && [ "$DOWNLOADED_COUNT" -lt "$MAX_FILES" ]; do
          # Parse owner, repo, and path from each JSON line
          OWNER=$(echo "$line" | jq -r '.owner')
          REPO=$(echo "$line" | jq -r '.repo')
          FILE_PATH=$(echo "$line" | jq -r '.path')
          
          # Try common default branches
          POSSIBLE_BRANCHES=("main" "master")
          FILE_URL=""
          for BRANCH in "${POSSIBLE_BRANCHES[@]}"; do
            CANDIDATE_URL="https://raw.githubusercontent.com/${OWNER}/${REPO}/${BRANCH}/${FILE_PATH}"
            # Check if the URL actually returns a 200 OK without downloading the whole file
            # Use curl -s -o /dev/null -w "%{http_code}" to get only the status code
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$CANDIDATE_URL")
            if [ "$HTTP_STATUS" -eq 200 ]; then
              FILE_URL="$CANDIDATE_URL"
              break # Found a valid URL, break from branch loop
            fi
          done

          if [ -z "$FILE_URL" ]; then
            echo "Skipping file as raw URL could not be constructed or found: ${OWNER}/${REPO}/${FILE_PATH}"
            continue # Move to next file if no valid URL found
          fi

          FILENAME=$(basename "$FILE_URL") # Extract filename from the working URL
          TEMP_FILE="sc/temp_${FILENAME}" # Temporary file name
          
          echo "Attempting to download: $FILE_URL"
          # Use --no-check-certificate for compatibility, but be cautious in production
          wget --no-check-certificate -q -O "$TEMP_FILE" "$FILE_URL"
          
          if [ $? -eq 0 ]; then
            echo "Successfully downloaded $FILENAME"
            # Simple heuristic check for Clash-like config
            if grep -q "proxies:" "$TEMP_FILE" || grep -q "proxy-groups:" "$TEMP_FILE"; then
              echo "  -> Appears to be a Clash-like config. Appending to merged_config.yaml"
              # Append file content (removing leading '---' if present)
              if [ "$(wc -l < "$TEMP_FILE")" -gt 1 ] || [ "$(grep -c '---' "$TEMP_FILE")" -eq 0 ]; then
                tail -n +$(awk '/^---$/{found=1; if(NR>1)print NR+1; next}END{if(!found)print 1}' "$TEMP_FILE") "$TEMP_FILE" >> sc/merged_config.yaml
              else
                cat "$TEMP_FILE" >> sc/merged_config.yaml
              fi
              echo "" >> sc/merged_config.yaml # Add an empty line to separate file contents
              DOWNLOADED_COUNT=$((DOWNLOADED_COUNT + 1))
            else
              echo "  -> Not a recognized Clash-like config, skipping merge."
            fi
            rm "$TEMP_FILE" # Remove temporary file
          else
            echo "Failed to download $FILE_URL"
          fi
        done < github_search_results.json
        
        if [ "$DOWNLOADED_COUNT" -eq 0 ]; then
          echo "Warning: No valid YAML configurations were downloaded."
          # Option to fail workflow here if this is a mandatory requirement
          # exit 1
        fi
        
        echo "Finished downloading YAML files. Total valid files merged: $DOWNLOADED_COUNT"
        
      shell: bash

    - name: Commit and push results
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        git add sc/merged_config.yaml
        git commit -m "Update merged_config.yaml with auto-discovered configs" || echo "No changes to commit"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
