name: Download and Merge Clash Configs

on:
  workflow_dispatch: # Allows manual triggering
  push:
    branches:
      - main         # Triggers on push to main branch
  schedule:
    - cron: '0 0 * * *' # Runs daily at 00:00 JST

jobs:
  download-and-merge:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Allows writing to the repository (committing files)

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create output directory
      run: mkdir -p sc

    - name: Download and Merge Clash Configs
      id: merge_configs
      run: |
        echo "Starting download and merge of specified Clash configs..."
        
        # --- 请在这里列出你找到的 Clash 配置文件原始 URL ---
        # 可以是 raw.githubusercontent.com 链接，也可以是 Clash 订阅链接
        # 每个 URL 之间用空格分隔，如果你有多个
        CLASH_CONFIG_URLS="https://raw.githubusercontent.com/qjlxg/vt/refs/heads/main/clash_config.yaml"
        # 示例：CLASH_CONFIG_URLS="https://example.com/sub1.yaml https://raw.githubusercontent.com/user/repo/main/config.yaml"
        
        # 创建空的合并文件，并写入 Clash YAML 的起始标记
        echo "---" > sc/merged_clash_proxies.yaml
        echo "proxies:" >> sc/merged_clash_proxies.yaml # 为代理部分添加根键
        
        DOWNLOAD_SUCCESS_COUNT=0
        
        for URL in $CLASH_CONFIG_URLS; do
          echo "Attempting to process URL: $URL"
          TEMP_CONFIG_FILE="sc/temp_$(basename $(echo "$URL" | cut -d '?' -f 1) | sed 's/\..*$//').yaml" # 临时文件，避免文件名冲突
          
          # 尝试下载文件
          wget --no-check-certificate -q -O "$TEMP_CONFIG_FILE" "$URL"
          
          if [ $? -eq 0 ]; then
            echo "  -> Successfully downloaded config from $URL"
            
            # --- 核心逻辑：提取代理节点并合并 ---
            # 检查文件是否包含 'proxies:' 字段，表示这是一个Clash配置
            if grep -q "^proxies:" "$TEMP_CONFIG_FILE"; then
              echo "  -> Extracting proxies..."
              # 使用 sed 提取 'proxies:' 部分，并缩进2个空格
              # sed -n '/^proxies:/,$p' 提取从'proxies:'开始到文件结束的内容
              # tail -n +2 跳过'proxies:'这一行
              # sed 's/^/  /' 给每一行加两个空格缩进
              sed -n '/^proxies:/,$p' "$TEMP_CONFIG_FILE" | tail -n +2 | sed 's/^/  /' >> sc/merged_clash_proxies.yaml
              DOWNLOAD_SUCCESS_COUNT=$((DOWNLOAD_SUCCESS_COUNT + 1))
            elif base64 --decode "$TEMP_CONFIG_FILE" 2>/dev/null | grep -q "^proxies:"; then
              echo "  -> Decoded base64, appears to be Clash config. Extracting proxies..."
              # 如果是 Base64 编码，先解码，再提取
              base64 --decode "$TEMP_CONFIG_FILE" | sed -n '/^proxies:/,$p' | tail -n +2 | sed 's/^/  /' >> sc/merged_clash_proxies.yaml
              DOWNLOAD_SUCCESS_COUNT=$((DOWNLOAD_SUCCESS_COUNT + 1))
            else
              echo "  -> Not a recognized Clash config format (missing 'proxies:' or not decodable base64). Skipping."
            fi
            
            rm "$TEMP_CONFIG_FILE" # 清理临时文件
          else
            echo "  -> Failed to download from $URL. Skipping."
          fi
        done
        
        if [ "$DOWNLOAD_SUCCESS_COUNT" -eq 0 ]; then
          echo "Error: No valid Clash configurations were downloaded and merged."
          exit 1 # 如果没有成功合并任何配置，则让工作流失败
        else
          echo "Finished downloading and merging. Total valid configs processed: $DOWNLOAD_SUCCESS_COUNT"
          echo "--- Content of sc/merged_clash_proxies.yaml (first 50 lines) ---"
          head -n 50 sc/merged_clash_proxies.yaml
          echo "----------------------------------------------------"
        fi
      shell: bash

    - name: Commit and push results
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        git add sc/merged_clash_proxies.yaml
        git commit -m "Update merged_clash_proxies.yaml with latest configs" || echo "No changes to commit"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
