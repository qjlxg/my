name: Automated Proxy Management (with SubConv)

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'

jobs:
  process_proxies:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5 # 使用 Python
        with:
          python-version: '3.x' # 选择一个合适的 Python 版本

      - name: Set up Node.js (for YAML processing)
        uses: actions/setup-node@v4
        with:
          node-version: '16'

      - name: Install Node.js YAML dependencies
        run: npm install js-yaml

      - name: Create data directory
        run: mkdir -p data

      # --- 新增：克隆 SubConv 仓库并安装依赖 ---
      - name: Clone SubConv repository
        run: |
          git clone https://github.com/SubConv/SubConv.git ./subconv_repo
          cd ./subconv_repo
          pip install -r requirements.txt # 安装 SubConv 的 Python 依赖

      - name: Download Clash Core (for speed testing)
        run: |
          CLASH_VERSION="v2023.08.17.01" # 检查 Clash Premium 或 Clash Meta Release 页面获取最新版本
          curl -L "https://github.com/Dreamacro/clash/releases/download/${CLASH_VERSION}/clash-linux-amd64-${CLASH_VERSION}.gz" -o clash.gz
          gzip -d clash.gz
          chmod +x clash

      - name: Prepare combined subscription URLs
        run: |
          # 你的订阅链接，这里可以直接写死，或者从文件读取
          echo "https://raw.githubusercontent.com/qjlxg/vt/refs/heads/main/clash.yaml" > sub_urls.txt
          echo "https://raw.githubusercontent.com/qjlxg/my/refs/heads/main/sc/OP404OP.yaml" >> sub_urls.txt
          # 将所有订阅链接组合成一个列表，供 SubConv 使用
          # SubConv 可能会接受一个文件路径，或者多个 URL 作为参数
          # 你需要查看 SubConv 的文档来确定如何传递多个订阅URL给它
          
      - name: Convert and Deduplicate with SubConv
        # 这一步需要根据 SubConv 的实际用法来填写
        # 假设 SubConv 有一个命令行工具或一个主脚本 `main.py`
        # 你需要查阅 SubConv 的 README，找到如何：
        # 1. 传递多个订阅链接作为输入
        # 2. 指定输出为 Clash YAML 格式
        # 3. 启用其内置的去重功能
        run: |
          cd ./subconv_repo
          # 示例命令 (请替换为实际的 SubConv 用法!)
          # 例如：python main.py convert --urls "URL1" "URL2" --target clash --deduplicate --output ../converted_clash.yaml
          # 或者，如果它支持读取文件：
          # python main.py convert --url-file ../sub_urls.txt --target clash --deduplicate --output ../converted_clash.yaml
          python your_subconv_script.py --urls "你的第一个订阅URL" "你的第二个订阅URL" --target clash --deduplicate --output ../converted_clash.yaml # 假设的命令
          
          # 假设转换后的文件会出现在仓库根目录下的 converted_clash.yaml
          cd .. # 回到仓库根目录

      - name: Perform Speed Test with Clash Core
        # 这部分与之前的脚本相同
        run: |
          echo "proxies: $(cat converted_clash.yaml | yq '.proxies')" > test_config.yaml
          echo "external-controller: 127.0.0.1:9090" >> test_config.yaml
          echo "log-level: info" >> test_config.yaml
          
          ./clash -f test_config.yaml &
          CLASH_PID=$!
          sleep 5
          
          NODE_NAMES=$(cat converted_clash.yaml | yq '.proxies[].name' | tr '\n' ' ')
          echo "Testing nodes: $NODE_NAMES"

          RESULTS_FILE="test_results.txt"
          echo "" > $RESULTS_FILE

          for NODE_NAME in $NODE_NAMES; do
            echo "Testing $NODE_NAME..."
            LATENCY=$(curl -s -X GET "http://127.0.0.1:9090/proxies/$NODE_NAME/delay?url=https://www.google.com/generate_204&timeout=5000" | jq -r '.delay')
            if [ "$LATENCY" == "null" ] || [ "$LATENCY" == "" ]; then
              LATENCY="Timeout/Error"
            fi
            echo "$NODE_NAME: $LATENCY ms" >> $RESULTS_FILE
          done
          
          kill $CLASH_PID
          sleep 1

      - name: Filter and Organize Proxies Based on Speed Test
        # 这部分与之前的脚本相同
        run: |
          node -e '
            const fs = require("fs");
            const yaml = require("js-yaml");

            try {
              const allProxies = yaml.load(fs.readFileSync("converted_clash.yaml", "utf8")).proxies;
              const testResults = fs.readFileSync("test_results.txt", "utf8").split("\n").filter(line => line.trim() !== "");

              const proxyLatencyMap = new Map();
              testResults.forEach(line => {
                const parts = line.split(": ");
                if (parts.length === 2) {
                  const name = parts[0];
                  let latency = parseInt(parts[1]);
                  if (isNaN(latency) || latency === 0) {
                    latency = Infinity;
                  }
                  proxyLatencyMap.set(name, latency);
                }
              });

              const sortedAndFilteredProxies = allProxies
                .filter(p => p && p.name && proxyLatencyMap.has(p.name) && proxyLatencyMap.get(p.name) < Infinity)
                .sort((a, b) => proxyLatencyMap.get(a.name) - proxyLatencyMap.get(b.name));

              const finalConfig = {
                "port": 7890,
                "socks-port": 7891,
                "allow-lan": false,
                "mode": "rule",
                "log-level": "info",
                "external-controller": "0.0.0.0:9090",
                "proxies": sortedAndFilteredProxies,
                "proxy-groups": [
                    {
                        "name": "Proxy",
                        "type": "select",
                        "proxies": sortedAndFilteredProxies.map(p => p.name)
                    },
                    {
                        "name": "Direct",
                        "type": "direct"
                    }
                ],
                "rules": [
                    "MATCH,Proxy"
                ]
              };

              fs.writeFileSync("data/clash.yaml", yaml.dump(finalConfig, { indent: 2 }));
              console.log("Proxies collected, converted, tested, and saved successfully!");

            } catch (e) {
              console.error("Error processing proxies:", e);
              process.exit(1);
            }
          '

      - name: Commit and push changes
        run: |
          git config user.name github-actions[bot]
          git config user.email github-actions[bot]@users.noreply.github.com
          git add data/clash.yaml
          git commit -m "Update Clash config with tested proxies" || echo "No changes to commit"
          git push
