name: Automated Proxy Management (tindy2013/subconverter & Mihomo)

on:
  workflow_dispatch: # 允许手动触发
  schedule:
    - cron: '0 */6 * * *' # 每6小时运行一次

jobs:
  process_proxies:
    runs-on: ubuntu-latest
    permissions:
      contents: write # 授予写入权限，以便推送结果文件

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js (for YAML processing)
        uses: actions/setup-node@v4
        with:
          node-version: '16'

      - name: Install Node.js YAML dependencies
        run: npm install js-yaml yq # 安装 yq 工具来更方便地处理 YAML

      - name: Create data directory
        run: mkdir -p data

      - name: Download tindy2013/subconverter v0.9.0 Binary
        run: |
          SUB_CONVERTER_VERSION="v0.9.0"
          DOWNLOAD_URL="https://github.com/tindy2013/subconverter/releases/download/${SUB_CONVERTER_VERSION}/subconverter_linux64.tar.gz"
          echo "Attempting to download subconverter from: ${DOWNLOAD_URL}"
          curl -L --fail -o subconverter.tar.gz "${DOWNLOAD_URL}"
          
          file subconverter.tar.gz
          gzip -t subconverter.tar.gz || { echo "Downloaded subconverter file is not a valid gzip. Aborting."; exit 1; }

          tar -xzf subconverter.tar.gz
          
          # *** 关键修改：将真正的可执行文件从子目录移动到当前目录 ***
          # 根据常见的打包方式，通常解压后会有一个同名目录，里面才是可执行文件
          if [ -f "subconverter/subconverter" ]; then
              mv subconverter/subconverter . # 将可执行文件移动到当前目录
              rmdir subconverter # 删除现在为空的目录
          fi
          # 如果文件名不是 'subconverter' 或者目录结构不同，需要根据实际解压情况调整
          # 可以先用 'ls -R' 看看解压后的文件结构
          
          chmod +x subconverter # 授予执行权限给 'subconverter' 文件

      - name: Download Mihomo (Clash Meta) Core for Speed Testing
        run: |
          MIHOMO_VERSION="v1.18.2" # 请务必检查 mihomo Release 页面获取最新版本号
          DOWNLOAD_URL="https://github.com/MetaCubeX/mihomo/releases/download/${MIHOMO_VERSION}/mihomo-linux-amd64-${MIHOMO_VERSION}.gz"
          echo "Attempting to download mihomo from: ${DOWNLOAD_URL}"
          curl -L --fail -o mihomo.gz "${DOWNLOAD_URL}"
          
          gzip -t mihomo.gz || { echo "Downloaded mihomo file is not a valid gzip. Aborting."; exit 1; }

          gzip -d mihomo.gz
          chmod +x mihomo # 授予执行权限

      - name: Convert and Deduplicate with tindy2013/subconverter
        run: |
          ./subconverter -g "https://sub.example.com/sub?target=clash&url=https://raw.githubusercontent.com/qjlxg/vt/refs/heads/main/clash.yaml|https://raw.githubusercontent.com/qjlxg/my/refs/heads/main/sc/OP404OP.yaml&scv=true&dedup=true" > converted_clash.yaml

      - name: Perform Speed Test with Mihomo Core
        run: |
          echo "proxies: $(yq '.proxies' converted_clash.yaml)" > test_config.yaml
          echo "external-controller: 127.0.0.1:9090" >> test_config.yaml
          echo "log-level: info" >> test_config.yaml
          
          ./mihomo -f test_config.yaml &
          MIHOMO_PID=$!
          sleep 5

          NODE_NAMES=$(yq '.proxies[].name' converted_clash.yaml | tr '\n' ' ')
          echo "Testing nodes: $NODE_NAMES"

          RESULTS_FILE="test_results.txt"
          echo "" > $RESULTS_FILE

          for NODE_NAME in $NODE_NAMES; do
            echo "Testing $NODE_NAME..."
            LATENCY=$(curl -s -X GET "http://127.0.0.1:9090/proxies/$NODE_NAME/delay?url=https://www.google.com/generate_204&timeout=5000" | jq -r '.delay')
            if [ "$LATENCY" == "null" ] || [ "$LATENCY" == "" ]; then
              LATENCY="Timeout/Error"
            fi
            echo "$NODE_NAME: $LATENCY ms" >> $RESULTS_FILE
          done
          
          kill $MIHOMO_PID
          sleep 1

      - name: Filter and Organize Proxies Based on Speed Test
        run: |
          node -e '
            const fs = require("fs");
            const yaml = require("js-yaml");

            try {
              const allProxies = yaml.load(fs.readFileSync("converted_clash.yaml", "utf8")).proxies;
              const testResults = fs.readFileSync("test_results.txt", "utf8").split("\n").filter(line => line.trim() !== "");

              const proxyLatencyMap = new Map();
              testResults.forEach(line => {
                const parts = line.split(": ");
                if (parts.length === 2) {
                  const name = parts[0];
                  let latency = parseInt(parts[1]);
                  if (isNaN(latency) || latency === 0) {
                    latency = Infinity;
                  }
                  proxyLatencyMap.set(name, latency);
                }
              });

              const sortedAndFilteredProxies = allProxies
                .filter(p => p && p.name && proxyLatencyMap.has(p.name) && proxyLatencyMap.get(p.name) < Infinity)
                .sort((a, b) => proxyLatencyMap.get(a.name) - proxyLatencyMap.get(b.name));

              const finalConfig = {
                "port": 7890,
                "socks-port": 7891,
                "allow-lan": false,
                "mode": "rule",
                "log-level": "info",
                "external-controller": "0.0.0.0:9090",
                "proxies": sortedAndFilteredProxies,
                "proxy-groups": [
                    {
                        "name": "Proxy",
                        "type": "select",
                        "proxies": sortedAndFilteredProxies.map(p => p.name)
                    },
                    {
                        "name": "Direct",
                        "type": "direct"
                    }
                ],
                "rules": [
                    "MATCH,Proxy"
                ]
              };

              fs.writeFileSync("data/clash.yaml", yaml.dump(finalConfig, { indent: 2 }));
              console.log("Proxies collected, converted, tested, and saved successfully!");

            } catch (e) {
              console.error("Error processing proxies:", e);
              process.exit(1);
            }
          '

      - name: Commit and push changes
        run: |
          git config user.name github-actions[bot]
          git config user.email github-actions[bot]@users.noreply.github.com
          git add data/clash.yaml
          git commit -m "Update Clash config with tested proxies" || echo "No changes to commit"
          git push
